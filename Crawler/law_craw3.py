# -*- coding: utf-8 -*-
"""
Created on Fri Dec  6 15:38:44 2019

@author: Kai-Yuan
"""
from datetime import date, timedelta, datetime
# Generated by Selenium IDE
import pytest
import time
import re
import requests
import os
import warnings
import random
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options

#os.chdir(r'C:\Users\yo\Desktop\123')

class Craw():
  def setup_method(self, method):
    options = Options()
    options.add_argument('--no-sandbox')
    options.add_argument('--window-size=1920,1080')
    options.add_argument('--headless')
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def search_one_day(self, date):
    year = date.year-1911
    month = date.month
    day = date.day
    self.driver.get("https://law.judicial.gov.tw/FJUD/Default_AD.aspx")
    self.driver.find_element(By.ID, "dy1").click()
    self.driver.find_element(By.ID, "dy1").send_keys(str(year))
    self.driver.find_element(By.ID, "dm1").click()
    self.driver.find_element(By.ID, "dm1").send_keys(str(month))
    self.driver.find_element(By.ID, "dd1").click()
    self.driver.find_element(By.ID, "dd1").send_keys(str(day))
    self.driver.find_element(By.ID, "dy2").click()
    self.driver.find_element(By.ID, "dy2").send_keys(str(year))
    self.driver.find_element(By.ID, "dm2").click()
    self.driver.find_element(By.ID, "dm2").send_keys(str(month))
    self.driver.find_element(By.ID, "dd2").click()
    self.driver.find_element(By.ID, "dd2").send_keys(str(day))
    element = self.driver.find_element(By.ID, "jud_title")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    self.driver.find_element(By.ID, "jud_title").send_keys("")#搜尋
    self.driver.find_element(By.ID, "vtype_M").click()
    select = Select(self.driver.find_element_by_name('jud_court'))

    select.select_by_value("TPB")
    select.select_by_value("TCH")    
    select.select_by_value("TNH")
    select.select_by_value("KSH")
    select.select_by_value("HLH")
    '''
    select.select_by_value("TYD")
    select.select_by_value("SCD")
    select.select_by_value("MLD")
    select.select_by_value("TCD")
    select.select_by_value("CHD")
    select.select_by_value("NTD")
    select.select_by_value("ULD")
    select.select_by_value("CYD")
    select.select_by_value("TND")
    select.select_by_value("KSD")
    select.select_by_value("CTD")
    select.select_by_value("HLD")
    select.select_by_value("TTD")
    select.select_by_value("PTD")
    select.select_by_value("PHD")
    select.select_by_value("KMD")
    select.select_by_value("LCD")
    '''
    self.driver.find_element(By.ID, "btnQry").click()
    self.driver.switch_to.frame("iframe-data")
    
    html = self.driver.execute_script("return document.getElementsByTagName('html')[0].innerHTML")
    
    soup = BeautifulSoup(html, 'html5lib')
    form = soup.find('form',attrs={'class':None})
    action = form.attrs['action']
    q_position = action.find("&q=")
    div = form.find('div',attrs={"id":"plPager"})
    title = soup.find('title')
    if title.text.strip()!='查詢結果列表':
        return
    if div:
        span_text = div.find('span').text
        result_amount = eval(re.search(r'\d+', span_text).group())
        if result_amount > 500:
            result_amount = 500 
        
            
    else:
        result_amount = len(form.find_all('tr', attrs={'class':'summary'}))
    number =0    
    url_base = "https://law.judicial.gov.tw/FJUD/data.aspx?ro={}&sort=DS&ot=in" + action[q_position:]
    for i in range(result_amount):
      try:
        print(f'case{i}')
        if x<=2*650/35704:
          article_html = requests.get(url_base.format(i), verify=False)
          #print(article_html.encoding)
          article_soup = BeautifulSoup(article_html.text, 'html5lib')
          article_div = article_soup.find('div', attrs={'class':'text-pre text-pre-in'})
          #print(article_div.text)
          x =random.uniform(0,1)
        
          with open(f"law_txts/{date.strftime('%Y %m %d')}-{i}.txt", 'w', encoding='utf-8') as fp:
              fp.write(article_div.text)
          number = number+1
        if number>=651:
          break
        #time.sleep(1)
      except:
        print ('error')
        
    

def with_days(days, start_day, reverse):
	# if reverse = true 往後數
	for i in range(days):
		if reverse:
			#起始日期往後
			current = start_day + timedelta(i)
		else:
			#起始日期往前
			current = start_day - timedelta(i)
		print(f"Proccess: Day{current}")
		test = Craw()
		test.setup_method("POST")
		test.search_one_day(current)
		test.teardown_method("POST")



def with_end(start_day, end_day):
  current = start_day
  i = 0
  while current < end_day:
    current = start_day + timedelta(i)
    i += 1
    print(f"Proccess: Day{current}")
    test = Craw()
    test.setup_method("POST")
    test.search_one_day(current)
    test.teardown_method("POST")


if __name__ == '__main__':
	warnings.simplefilter('ignore',requests.urllib3.exceptions.InsecureRequestWarning)

	today = date.today()
	#起始日期
	start_day = datetime.strptime('2018 6 9','%Y %m %d')
	#尋找次數
	days = 22
	#結束日期
	end_day = datetime.strptime('2018 12 31','%Y %m %d')
	#
	reverse = True
	
	if 'law_txts' not in os.listdir():
		os.mkdir('law_txts')
		
	#with_days(days, start_day, reverse)
	with_end(start_day, end_day)


